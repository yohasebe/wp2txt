#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

$: << File.join(File.dirname(__FILE__))
$: << File.join(File.dirname(__FILE__), '..', 'lib')

$DEBUG_MODE = false
SHAREDIR = File.join(File.dirname(__FILE__), '..', 'share')
DOCDIR = File.join(File.dirname(__FILE__), '..', 'doc')

require 'wp2txt'
require 'wp2txt/utils'
require 'wp2txt/version'
require 'optimist'

include Wp2txt

opts = Optimist::options do
	version Wp2txt::VERSION
	banner <<-EOS
WP2TXT extracts plain text data from Wikipedia dump file (encoded in XML/compressed with Bzip2) stripping all the MediaWiki markups and other metadata.

Usage: wp2txt [options]
where [options] are:
EOS

  opt :input_file,  "Wikipedia dump file with .bz2 (compressed) or .txt (uncompressed) format", :required => true
  opt :output_dir,  "Output directory", :default => Dir::pwd, :type => String
  opt :convert,     "Output in plain text (converting from XML)", :default => true
  opt :list,    "Show list items in output", :default => false 
  opt :heading, "Show section titles in output", :default => true, :short => "-d"
  opt :title,   "Show page titles in output", :default => true
  opt :table,   "Show table source code in output", :default => false
  opt :inline, "leave inline template notations as they are", :default => false
  opt :multiline, "leave multiline template notations as they are", :default => false
  opt :ref, "leave reference notations in the format [ref]...[/ref]", :default => false
  opt :redirect, "Show redirect destination", :default => false
  opt :marker, "Show symbols prefixed to list items, definitions, etc.", :default => true
  opt :category, "Show article category information", :default => true 
  opt :category_only, "Extract only article title and categories", :default => false
  opt :summary_only, "Extract only article title, categories, and summary text before first heading", :default => false
  opt :file_size,   "Approximate size (in MB) of each output file", :default => 10
  opt :num_threads,   "Number of threads to be spawned (capped to the number of CPU cores; set 99 to spawn max num of threads)", :default => 4
end
Optimist::die :size, "must be larger than 0" unless opts[:file_size] >= 0
Optimist::die :output_dir, "must exist" unless File.exist?(opts[:output_dir])

input_file = ARGV[0]
output_dir = opts[:output_dir]
tfile_size = opts[:file_size]
num_threads = opts[:num_threads]
convert = opts[:convert]
strip_tmarker = opts[:marker] ? false : true
opt_array = [:title, :list, :heading, :table, :redirect, :multiline, :category, :category_only, :summary_only]
$leave_inline_template = true if opts[:inline]
$leave_ref = true if opts[:ref]
config = {}
opt_array.each do |opt|
  config[opt] = opts[opt]
end

parent = Wp2txt::CmdProgbar.new
wpconv = Wp2txt::Runner.new(parent, input_file, output_dir, tfile_size, num_threads, convert, strip_tmarker)

wpconv.extract_text do |article|
  format_wiki!(article.title)

  if config[:category_only]
    title = "#{article.title}\t"
    contents = article.categories.join(", ")
    contents << "\n"
  elsif config[:category] && !article.categories.empty?
    title = "\n[[#{article.title}]]\n\n"
    contents = "\nCATEGORIES: "
    contents << article.categories.join(", ")
    contents << "\n\n"
  else
    title = "\n[[#{article.title}]]\n\n"
    contents = ""
  end

  unless config[:category_only]
    article.elements.each do |e|
      case e.first
      when :mw_heading
        break if config[:summary_only]
        next if !config[:heading]
        format_wiki!(e.last)
        line = e.last
        line << "+HEADING+" if $DEBUG_MODE
      when :mw_paragraph
        format_wiki!(e.last)
        line = e.last + "\n"
        line << "+PARAGRAPH+" if $DEBUG_MODE
      when :mw_table, :mw_htable
        next if !config[:table]
        line = e.last
        line << "+TABLE+" if $DEBUG_MODE
      when :mw_pre
        next if !config[:pre]
        line = e.last
        line << "+PRE+" if $DEBUG_MODE
      when :mw_quote
        line = e.last
        line << "+QUOTE+" if $DEBUG_MODE
      when :mw_unordered, :mw_ordered, :mw_definition
        next if !config[:list]
        line = e.last
        line << "+LIST+" if $DEBUG_MODE
      when :mw_ml_template
        next if !config[:multiline]
        line = e.last
        line << "+MLTEMPLATE+" if $DEBUG_MODE
      when :mw_redirect
        next if !config[:redirect]
        line = e.last
        line << "+REDIRECT+" if $DEBUG_MODE
        line << "\n\n"
      when :mw_isolated_template
        next if !config[:multiline]
        line = e.last
        line << "+ISOLATED_TEMPLATE+" if $DEBUG_MODE
      when :mw_isolated_tag
        next
      else
        if $DEBUG_MODE
          # format_wiki!(e.last)
          line = e.last
          line << "+OTHER+"
        else
          next
        end
      end
      contents << line << "\n"
    end
  end
    
  if /\A[\sã€€]*\z/m =~ contents
    result = ""
  else
    result = config[:title] ? title << contents : contents
  end
end
